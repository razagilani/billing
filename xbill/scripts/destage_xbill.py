from datetime import datetime
import argparse
import backup_tools
import os
from xbill import settings
from django.core.management import setup_environ

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description=
            "Destage script for xbill database")
    parser.add_argument(
        "--DBName",
        help="The database for xbill to be restored to",
        default=settings.DATABASES['default']['NAME'],
        required=False)
    parser.add_argument(
        "--DBUser",
        help="The database user for xbill to be restored as",
        default=settings.DATABASES['default']['USER'],
        required=False)
    parser.add_argument(
        "--environment",
        help="The xbill app environment to be restored from (prod, stage)",
        default='prod',
        required=False)
    parser.add_argument(
        "--DBhost",
        default=settings.DATABASES['default']['HOST'],
        type=str,
        help="The host on which the xbill is located, defaults to localhost",
        required=False)
    parser.add_argument(
        "--access_key",
        default=settings.S3_ACCESS_KEY,
        type=str,
        help="The S3 access key for authenticating, generated by AWS IAM",
        required=False)
    parser.add_argument(
        "--secret_key",
        default=settings.S3_SECRET_KEY,
        type=str,
        help="The S3 secret key for authenticating, generated by AWS IAM",
        required=False)
    args = parser.parse_args() 


    destage_tmp_dir = "/tmp/"
    app_name = 'xbill'
    database_name = args.DBName

    bucket = backup_tools.connect_to_bucket('{0}_{1}-backup'.format(app_name, args.environment),
                                            args.access_key,
                                            args.secret_key)

    print("Available backups:")
    for key in bucket:
        print key.last_modified, key.name

    download = backup_tools.get_latest_backup(bucket)
    print("Destaging newest: {0}".format(download.name))

    if os.path.isfile(destage_tmp_dir + download.name):
        print('file already downloaded')
    else:
        dump_file = file(destage_tmp_dir + download.name, 'w')
        backup_tools.download_from_bucket(download, bucket, dump_file)
        dump_file.close()

    backup_tools.untar_directory(destage_tmp_dir+download.name)

    backup_tools.restore_psql_from_file(database_name,
                                        args.DBhost,
                                        args.DBUser,
                                        destage_tmp_dir+download.name[:-4])
